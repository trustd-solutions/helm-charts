{{if eq .Values.app.platform "ee"}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.app.name}}
  labels:
    app: {{.Values.app.name}}
spec:
  serviceName: "{{.Values.app.name}}-svc"
  replicas: {{.Values.statefulset.replicas}}
  selector:
    matchLabels:
      app: {{.Values.app.name}}
  template:
    metadata:
      labels:
        app: {{.Values.app.name}}
    spec:
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: {{.Values.app.name}}
        image: {{.Values.statefulset.container.image}}
        imagePullPolicy: IfNotPresent
        ports:
        - name: grpc
          containerPort: {{ .Values.service.ports.grpc }}
          protocol: TCP
        - name: gui
          containerPort: {{ .Values.service.ports.gui }}
          protocol: TCP
        env:
        - name: AXONIQ_LICENSE
          value: "{{ template "license.path" . }}/axoniq.license"
        volumeMounts:
        - name: data
          mountPath: {{ template "data.path" . }}
        - name: events
          mountPath: {{ template "events.path" . }}
        - name: log
          mountPath: {{ template "log.path" . }}
        - name: config
          mountPath: {{ template "config.path" . }}
          readOnly: true
        - name: cluster-template
          mountPath: {{ template "config.path" . }}/cluster-template
          readOnly: true
        - name: system-token
          mountPath: {{ template "systemToken.path" . }}
          readOnly: true
        - name: license
          mountPath: {{ template "license.path" . }}
          readOnly: true
        readinessProbe:
          exec:
            command:
            - {{.Values.statefulset.readiness.exec.command}}
          initialDelaySeconds: {{.Values.statefulset.readiness.initialDelaySeconds}}
          periodSeconds: {{.Values.statefulset.readiness.periodSeconds}}
          timeoutSeconds: {{.Values.statefulset.readiness.timeoutSeconds}}
          failureThreshold: {{.Values.statefulset.readiness.failureThreshold}}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.ports.gui }}
          initialDelaySeconds: {{.Values.statefulset.liveness.initialDelaySeconds}}
          periodSeconds: {{.Values.statefulset.liveness.periodSeconds}}
          timeoutSeconds: {{.Values.statefulset.liveness.timeoutSeconds}}
          successThreshold: {{.Values.statefulset.liveness.successThreshold}}
          failureThreshold: {{.Values.statefulset.liveness.failureThreshold}}
      volumes:
        - name: config
          secret:
            secretName: axonserver-properties
        - name: cluster-template
          secret:
            secretName: axonserver-cluster-template
        - name: system-token
          secret:
            secretName: axonserver-token
        - name: license
          secret:
            secretName: axonserver-license
  volumeClaimTemplates:
    - metadata:
        name: events
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.events.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.events.storage}}
    - metadata:
        name: log
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.log.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.log.storage}}
    - metadata:
        name: data
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.data.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.data.storage}}
{{end}}